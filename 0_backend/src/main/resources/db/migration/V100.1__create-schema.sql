CREATE TABLE users (
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    fullname VARCHAR(255) NOT NULL
);

CREATE TABLE meal_types (
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX meal_types_unique_name_ix ON meal_types (LOWER(name));

CREATE TABLE category_types (
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    icon TEXT NOT NULL
);

CREATE UNIQUE INDEX category_types_name_unique ON category_types (LOWER(name));

CREATE TABLE categories (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    category_type_id BIGINT NOT NULL REFERENCES category_types (id),
    title            TEXT   NOT NULL,
    description      TEXT   NOT NULL
);

CREATE TABLE recipes (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id          BIGINT         NOT NULL REFERENCES users (id),
    created_at       TIMESTAMP      NOT NULL,
    updated_at       TIMESTAMP      NOT NULL,
    title            TEXT           NOT NULL,
    headline         TEXT           NOT NULL,
    preparation_time INTEGER        NOT NULL,
    cook_time        INTEGER        NOT NULL,
    total_time       INTEGER        NOT NULL,
    average_rating   NUMERIC(10, 2) NOT NULL DEFAULT 0.0,
    meal_type_id     BIGINT         NOT NULL REFERENCES meal_types (id),
    steps            TEXT,
    likes            INTEGER        NOT NULL DEFAULT (0)
);

CREATE OR REPLACE FUNCTION calculate_total_time()
    RETURNS trigger AS
$$
BEGIN
    NEW.total_time := NEW.cook_time + NEW.preparation_time;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER total_time_calculate
    BEFORE INSERT OR UPDATE
    ON recipes
    FOR EACH ROW
EXECUTE FUNCTION calculate_total_time();

CREATE TABLE recipe_categories (
    recipe_id   BIGINT NOT NULL REFERENCES recipes (id) ON DELETE CASCADE,
    category_id BIGINT NOT NULL REFERENCES categories (id),
    PRIMARY KEY (recipe_id, category_id)
);

CREATE TABLE ingredients (
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    recipe_id BIGINT  NOT NULL REFERENCES recipes (id) ON DELETE CASCADE,
    name      TEXT    NOT NULL,
    amount    REAL    NOT NULL,
    unit      TEXT    NOT NULL,
    order_no  INTEGER NOT NULL
);

CREATE TABLE instructions (
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    recipe_id   BIGINT  NOT NULL REFERENCES recipes (id) ON DELETE CASCADE,
    description TEXT    NOT NULL,
    order_no    INTEGER NOT NULL
);

CREATE UNIQUE INDEX instructions_receipe_id_order_no_unique_ix
    ON instructions (recipe_id, order_no);


CREATE TABLE feedbacks (
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP                               NOT NULL,
    commenter  TEXT                                    NOT NULL,
    rating     INT CHECK (rating >= 1 AND rating <= 5) NOT NULL,
    comment    TEXT                                    NOT NULL,
    recipe_id  BIGINT                                  NOT NULL REFERENCES recipes (id) ON DELETE CASCADE
);

CREATE OR REPLACE FUNCTION update_average_rating() RETURNS TRIGGER AS
$$
BEGIN
    UPDATE recipes r
    SET average_rating = (SELECT AVG(f.rating) FROM feedbacks f WHERE f.recipe_id = NEW.recipe_id)
    WHERE r.id = NEW.recipe_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER feedbacks_update
    AFTER INSERT OR UPDATE
    ON feedbacks
    FOR EACH ROW
EXECUTE PROCEDURE update_average_rating();